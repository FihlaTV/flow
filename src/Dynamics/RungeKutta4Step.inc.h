    // This file was auto-generated by RungeKutta4Step.py

    void step_1d(Vector const& v, Vector &out)
    {
        Scalar stepSize = realParamValues[0];
        
        /* Calculate first half-step vector: */
        model(v, v0);
        v0[0] *= stepSize * Scalar(0.5);
        
        /* Calculate second half-step vector: */
        vTemp[0] = v[0] + v0[0];
        model(vTemp, v1);
        v1[0] *= stepSize * Scalar(0.5);
        
        /* Calculate third half-step vector: */
        vTemp[0] = v[0] + v1[0];
        model(vTemp, v2);
        v2[0] *= stepSize;
        
        /* Calculate fourth half-step vector: */
        vTemp[0] = v[0] + v2[0];
        model(vTemp, out);
        out[0] *= stepSize;
        
        /* Calculate step vector: */
        v1[0] *= Scalar(2);
        v2[0] += v1[0] + v0[0];
        v2[0] *= Scalar(2);
        out[0] += v2[0];
        out[0] /= Scalar(6);
    }

    void step_2d(Vector const& v, Vector &out)
    {
        Scalar stepSize = realParamValues[0];
        
        /* Calculate first half-step vector: */
        model(v, v0);
        v0[0] *= stepSize * Scalar(0.5);
        v0[1] *= stepSize * Scalar(0.5);
        
        /* Calculate second half-step vector: */
        vTemp[0] = v[0] + v0[0];
        vTemp[1] = v[1] + v0[1];
        model(vTemp, v1);
        v1[0] *= stepSize * Scalar(0.5);
        v1[1] *= stepSize * Scalar(0.5);
        
        /* Calculate third half-step vector: */
        vTemp[0] = v[0] + v1[0];
        vTemp[1] = v[1] + v1[1];
        model(vTemp, v2);
        v2[0] *= stepSize;
        v2[1] *= stepSize;
        
        /* Calculate fourth half-step vector: */
        vTemp[0] = v[0] + v2[0];
        vTemp[1] = v[1] + v2[1];
        model(vTemp, out);
        out[0] *= stepSize;
        out[1] *= stepSize;
        
        /* Calculate step vector: */
        v1[0] *= Scalar(2);
        v1[1] *= Scalar(2);
        v2[0] += v1[0] + v0[0];
        v2[1] += v1[1] + v0[1];
        v2[0] *= Scalar(2);
        v2[1] *= Scalar(2);
        out[0] += v2[0];
        out[1] += v2[1];
        out[0] /= Scalar(6);
        out[1] /= Scalar(6);
    }

    void step_3d(Vector const& v, Vector &out)
    {
        Scalar stepSize = realParamValues[0];
        
        /* Calculate first half-step vector: */
        model(v, v0);
        v0[0] *= stepSize * Scalar(0.5);
        v0[1] *= stepSize * Scalar(0.5);
        v0[2] *= stepSize * Scalar(0.5);
        
        /* Calculate second half-step vector: */
        vTemp[0] = v[0] + v0[0];
        vTemp[1] = v[1] + v0[1];
        vTemp[2] = v[2] + v0[2];
        model(vTemp, v1);
        v1[0] *= stepSize * Scalar(0.5);
        v1[1] *= stepSize * Scalar(0.5);
        v1[2] *= stepSize * Scalar(0.5);
        
        /* Calculate third half-step vector: */
        vTemp[0] = v[0] + v1[0];
        vTemp[1] = v[1] + v1[1];
        vTemp[2] = v[2] + v1[2];
        model(vTemp, v2);
        v2[0] *= stepSize;
        v2[1] *= stepSize;
        v2[2] *= stepSize;
        
        /* Calculate fourth half-step vector: */
        vTemp[0] = v[0] + v2[0];
        vTemp[1] = v[1] + v2[1];
        vTemp[2] = v[2] + v2[2];
        model(vTemp, out);
        out[0] *= stepSize;
        out[1] *= stepSize;
        out[2] *= stepSize;
        
        /* Calculate step vector: */
        v1[0] *= Scalar(2);
        v1[1] *= Scalar(2);
        v1[2] *= Scalar(2);
        v2[0] += v1[0] + v0[0];
        v2[1] += v1[1] + v0[1];
        v2[2] += v1[2] + v0[2];
        v2[0] *= Scalar(2);
        v2[1] *= Scalar(2);
        v2[2] *= Scalar(2);
        out[0] += v2[0];
        out[1] += v2[1];
        out[2] += v2[2];
        out[0] /= Scalar(6);
        out[1] /= Scalar(6);
        out[2] /= Scalar(6);
    }

    void step_4d(Vector const& v, Vector &out)
    {
        Scalar stepSize = realParamValues[0];
        
        /* Calculate first half-step vector: */
        model(v, v0);
        v0[0] *= stepSize * Scalar(0.5);
        v0[1] *= stepSize * Scalar(0.5);
        v0[2] *= stepSize * Scalar(0.5);
        v0[3] *= stepSize * Scalar(0.5);
        
        /* Calculate second half-step vector: */
        vTemp[0] = v[0] + v0[0];
        vTemp[1] = v[1] + v0[1];
        vTemp[2] = v[2] + v0[2];
        vTemp[3] = v[3] + v0[3];
        model(vTemp, v1);
        v1[0] *= stepSize * Scalar(0.5);
        v1[1] *= stepSize * Scalar(0.5);
        v1[2] *= stepSize * Scalar(0.5);
        v1[3] *= stepSize * Scalar(0.5);
        
        /* Calculate third half-step vector: */
        vTemp[0] = v[0] + v1[0];
        vTemp[1] = v[1] + v1[1];
        vTemp[2] = v[2] + v1[2];
        vTemp[3] = v[3] + v1[3];
        model(vTemp, v2);
        v2[0] *= stepSize;
        v2[1] *= stepSize;
        v2[2] *= stepSize;
        v2[3] *= stepSize;
        
        /* Calculate fourth half-step vector: */
        vTemp[0] = v[0] + v2[0];
        vTemp[1] = v[1] + v2[1];
        vTemp[2] = v[2] + v2[2];
        vTemp[3] = v[3] + v2[3];
        model(vTemp, out);
        out[0] *= stepSize;
        out[1] *= stepSize;
        out[2] *= stepSize;
        out[3] *= stepSize;
        
        /* Calculate step vector: */
        v1[0] *= Scalar(2);
        v1[1] *= Scalar(2);
        v1[2] *= Scalar(2);
        v1[3] *= Scalar(2);
        v2[0] += v1[0] + v0[0];
        v2[1] += v1[1] + v0[1];
        v2[2] += v1[2] + v0[2];
        v2[3] += v1[3] + v0[3];
        v2[0] *= Scalar(2);
        v2[1] *= Scalar(2);
        v2[2] *= Scalar(2);
        v2[3] *= Scalar(2);
        out[0] += v2[0];
        out[1] += v2[1];
        out[2] += v2[2];
        out[3] += v2[3];
        out[0] /= Scalar(6);
        out[1] /= Scalar(6);
        out[2] /= Scalar(6);
        out[3] /= Scalar(6);
    }

    void step_5d(Vector const& v, Vector &out)
    {
        Scalar stepSize = realParamValues[0];
        
        /* Calculate first half-step vector: */
        model(v, v0);
        v0[0] *= stepSize * Scalar(0.5);
        v0[1] *= stepSize * Scalar(0.5);
        v0[2] *= stepSize * Scalar(0.5);
        v0[3] *= stepSize * Scalar(0.5);
        v0[4] *= stepSize * Scalar(0.5);
        
        /* Calculate second half-step vector: */
        vTemp[0] = v[0] + v0[0];
        vTemp[1] = v[1] + v0[1];
        vTemp[2] = v[2] + v0[2];
        vTemp[3] = v[3] + v0[3];
        vTemp[4] = v[4] + v0[4];
        model(vTemp, v1);
        v1[0] *= stepSize * Scalar(0.5);
        v1[1] *= stepSize * Scalar(0.5);
        v1[2] *= stepSize * Scalar(0.5);
        v1[3] *= stepSize * Scalar(0.5);
        v1[4] *= stepSize * Scalar(0.5);
        
        /* Calculate third half-step vector: */
        vTemp[0] = v[0] + v1[0];
        vTemp[1] = v[1] + v1[1];
        vTemp[2] = v[2] + v1[2];
        vTemp[3] = v[3] + v1[3];
        vTemp[4] = v[4] + v1[4];
        model(vTemp, v2);
        v2[0] *= stepSize;
        v2[1] *= stepSize;
        v2[2] *= stepSize;
        v2[3] *= stepSize;
        v2[4] *= stepSize;
        
        /* Calculate fourth half-step vector: */
        vTemp[0] = v[0] + v2[0];
        vTemp[1] = v[1] + v2[1];
        vTemp[2] = v[2] + v2[2];
        vTemp[3] = v[3] + v2[3];
        vTemp[4] = v[4] + v2[4];
        model(vTemp, out);
        out[0] *= stepSize;
        out[1] *= stepSize;
        out[2] *= stepSize;
        out[3] *= stepSize;
        out[4] *= stepSize;
        
        /* Calculate step vector: */
        v1[0] *= Scalar(2);
        v1[1] *= Scalar(2);
        v1[2] *= Scalar(2);
        v1[3] *= Scalar(2);
        v1[4] *= Scalar(2);
        v2[0] += v1[0] + v0[0];
        v2[1] += v1[1] + v0[1];
        v2[2] += v1[2] + v0[2];
        v2[3] += v1[3] + v0[3];
        v2[4] += v1[4] + v0[4];
        v2[0] *= Scalar(2);
        v2[1] *= Scalar(2);
        v2[2] *= Scalar(2);
        v2[3] *= Scalar(2);
        v2[4] *= Scalar(2);
        out[0] += v2[0];
        out[1] += v2[1];
        out[2] += v2[2];
        out[3] += v2[3];
        out[4] += v2[4];
        out[0] /= Scalar(6);
        out[1] /= Scalar(6);
        out[2] /= Scalar(6);
        out[3] /= Scalar(6);
        out[4] /= Scalar(6);
    }


TAB = "    "

def step(n):
    code = []
    code.append( "Scalar stepSize = realParamValues[0];" )

    code.append( "" )
    code.append( "/* Calculate first half-step vector: */" )
    code.append( "model(v, v0);" )
    for i in range(n):
        code.append( "v0[{0}] *= stepSize * Scalar(0.5);".format(i) )

    code.append( "" )
    code.append( "/* Calculate second half-step vector: */" )
    for i in range(n):
        code.append( "vTemp[{0}] = v[{0}] + v0[{0}];".format(i) )
    code.append( "model(vTemp, v1);" )
    for i in range(n):
        code.append( "v1[{0}] *= stepSize * Scalar(0.5);".format(i) )

    code.append( "" )
    code.append( "/* Calculate third half-step vector: */" )
    for i in range(n):
        code.append( "vTemp[{0}] = v[{0}] + v1[{0}];".format(i) )
    code.append( "model(vTemp, v2);" )
    for i in range(n):
        code.append( "v2[{0}] *= stepSize;".format(i) )

    code.append( "" )
    code.append( "/* Calculate fourth half-step vector: */" )
    for i in range(n):
        code.append( "vTemp[{0}] = v[{0}] + v2[{0}];".format(i) )
    code.append( "model(vTemp, out);" )
    for i in range(n):
        code.append( "out[{0}] *= stepSize;".format(i) )

    code.append( "" )
    code.append( "/* Calculate step vector: */" )
    for i in range(n):
        code.append( "v1[{0}] *= Scalar(2);".format(i) )
    for i in range(n):
        code.append( "v2[{0}] += v1[{0}] + v0[{0}];".format(i) )
    for i in range(n):
        code.append( "v2[{0}] *= Scalar(2);".format(i) )
    for i in range(n):
        code.append( "out[{0}] += v2[{0}];".format(i) )
    for i in range(n):
        code.append( "out[{0}] /= Scalar(6);".format(i) )

    code[0] = TAB + TAB + code[0]
    inner = '\n{0}{0}'.format(TAB).join(code)

    # Add support lines
    outer = [
        TAB + "void step_{0}d(Vector const& v, Vector &out)".format(n),
        TAB + "{",
        inner,
        TAB + "}"
    ]

    return '\n'.join(outer)

def write_steps(nvals):
    with open("RungeKutta4Step.inc.h", 'w') as fobj:
        header = "// This file was auto-generated by RungeKutta4Step.py"
        fobj.write(TAB + header)
        fobj.write("\n\n")
        for n in nvals:
            fobj.write( step(n) )
            fobj.write("\n\n")

if __name__ == '__main__':
    write_steps( range(1,6) )

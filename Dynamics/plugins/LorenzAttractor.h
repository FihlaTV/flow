/*
 * DO NOT EDIT THIS FILE.
 *
 * THIS FILE HAS BEEN AUTOMATICALLY GENERATED.
 * ANY CHANGES MADE TO THE CODE WILL BE LOST.
 *
 * TO MODIFY THE PARAMETER VALUES OR DYNAMICAL
 * EQUATIONS EDIT THE XML FILE (dynamics.xml).
 * 
 */
 
#ifndef LORENZATTRACTOR_INCLUDED_
#define LORENZATTRACTOR_INCLUDED_

#include "BaseModel.h"
#include "RungeKutta4.h"

#include "LorenzAttractorParameterDialog.h"

class LorenzAttractor : public DynamicalModel
{
  Scalar sigma;
  Scalar r;
  Scalar b;
public:
  LorenzAttractor(Scalar Sigma, Scalar R, Scalar B)
     : sigma(Sigma), r(R), b(B)
  { }

  virtual ~LorenzAttractor() { }

  virtual Vector exact(const Point& p) const
    {
      return Vector(sigma*(p[1]-p[0]),r*p[0]-p[1]-p[0]*p[2],p[0]*p[1]-b*p[2]);
    }

private:
  virtual void _setValue(const std::string& name, Scalar value)
    {
      if      (name == "sigma") sigma = value;
      else if (name == "r") r = value;
      else if (name == "b") b = value;
    }
};

class LorenzAttractorIntegrator : public Integrator
{
  LorenzAttractor* dynamics;
  RungeKutta4<LorenzAttractor>* integrator;
public:
  LorenzAttractorIntegrator()
    {
      dynamics = new LorenzAttractor(10.0, 21.0, 2.6);
      double stepSize = 0.01;
      integrator = new RungeKutta4<LorenzAttractor>(*dynamics, stepSize);
    }

  virtual ~LorenzAttractorIntegrator()
    {
      delete dynamics;
      delete integrator;
    }

  inline Vector step(const Point& p)
    {
      return integrator->step(p);
    }

  virtual unsigned int getModelVersion()
    {
      return dynamics->getModelVersion();
    }

  virtual CaveDialog* createParameterDialog(GLMotif::PopupMenu *parent)
    {
      return new LorenzAttractorParameterDialog(parent, dynamics);
    }

  virtual Vrui::Point center() const
    {
      return Vrui::Point(0.0, 0.0, 25.0);
    }
};

#endif

/*
 * DO NOT EDIT THIS FILE.
 *
 * THIS FILE HAS BEEN AUTOMATICALLY GENERATED.
 * ANY CHANGES MADE TO THE CODE WILL BE LOST.
 *
 * TO MODIFY THE PARAMETER VALUES OR DYNAMICAL
 * EQUATIONS EDIT THE XML FILE (dynamics.xml).
 * 
 */
 
#ifndef ABCFLOW_INCLUDED_
#define ABCFLOW_INCLUDED_

#include "BaseModel.h"
#include "RungeKutta4.h"

#include "ABCFlowParameterDialog.h"

class ABCFlow : public DynamicalModel
{
  Scalar A;
  Scalar B;
  Scalar C;
public:
  ABCFlow(Scalar A, Scalar B, Scalar C)
     : A(A), B(B), C(C)
  { }

  virtual ~ABCFlow() { }

  virtual Vector exact(const Point& p) const
    {
      return Vector(A*sin(p[2]) + C*cos(p[1]),B*sin(p[0]) + A*cos(p[2]),C*sin(p[1]) + B*cos(p[0]));
    }

private:
  virtual void _setValue(const std::string& name, Scalar value)
    {
      if      (name == "A") A = value;
      else if (name == "B") B = value;
      else if (name == "C") C = value;
    }
};

class ABCFlowIntegrator : public Integrator
{
  ABCFlow* dynamics;
  RungeKutta4<ABCFlow>* integrator;
public:
  ABCFlowIntegrator()
    {
      dynamics = new ABCFlow(1.732, 1.414, 0.1);
      double stepSize = 0.01;
      integrator = new RungeKutta4<ABCFlow>(*dynamics, stepSize);
    }

  virtual ~ABCFlowIntegrator()
    {
      delete dynamics;
      delete integrator;
    }

  inline Vector step(const Point& p)
    {
      return integrator->step(p);
    }

  virtual unsigned int getModelVersion()
    {
      return dynamics->getModelVersion();
    }

  virtual CaveDialog* createParameterDialog(GLMotif::PopupMenu *parent)
    {
      return new ABCFlowParameterDialog(parent, dynamics);
    }

  virtual Vrui::Point center() const
    {
      return Vrui::Point(0.0, 0.0, 0.0);
    }
};

#endif

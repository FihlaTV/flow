/*
 * DO NOT EDIT THIS FILE.
 *
 * THIS FILE HAS BEEN AUTOMATICALLY GENERATED.
 * ANY CHANGES MADE TO THE CODE WILL BE LOST.
 *
 * TO MODIFY THE PARAMETER VALUES OR DYNAMICAL
 * EQUATIONS EDIT THE XML FILE (dynamics.xml).
 * 
 */
 
#ifndef CYCLES_INCLUDED_
#define CYCLES_INCLUDED_

#include "BaseModel.h"
#include "RungeKutta4.h"

#include "CyclesParameterDialog.h"

class Cycles : public DynamicalModel
{
  Scalar s;
  Scalar dk_Y;
  Scalar dk_XZ;
public:
  Cycles(Scalar S, Scalar Dk_y, Scalar Dk_xz)
     : s(S), dk_Y(Dk_y), dk_XZ(Dk_xz)
  { }

  virtual ~Cycles() { }

  virtual Vector exact(const Point& p) const
    {
      return Vector(-s*p[2] + dk_XZ * p[0],dk_Y * p[1],s*p[0] + dk_XZ * p[2]);
    }

private:
  virtual void _setValue(const std::string& name, Scalar value)
    {
      if      (name == "s") s = value;
      else if (name == "dk_Y") dk_Y = value;
      else if (name == "dk_XZ") dk_XZ = value;
    }
};

class CyclesIntegrator : public Integrator
{
  Cycles* dynamics;
  RungeKutta4<Cycles>* integrator;
public:
  CyclesIntegrator()
    {
      dynamics = new Cycles(.12, -3, 0);
      double stepSize = 0.01;
      integrator = new RungeKutta4<Cycles>(*dynamics, stepSize);
    }

  virtual ~CyclesIntegrator()
    {
      delete dynamics;
      delete integrator;
    }

  inline Vector step(const Point& p)
    {
      return integrator->step(p);
    }

  virtual unsigned int getModelVersion()
    {
      return dynamics->getModelVersion();
    }

  virtual CaveDialog* createParameterDialog(GLMotif::PopupMenu *parent)
    {
      return new CyclesParameterDialog(parent, dynamics);
    }

  virtual Vrui::Point center() const
    {
      return Vrui::Point(0.0, 0.0, 0.0);
    }
};

#endif

/*
 * DO NOT EDIT THIS FILE.
 *
 * THIS FILE HAS BEEN AUTOMATICALLY GENERATED.
 * ANY CHANGES MADE TO THE CODE WILL BE LOST.
 *
 * TO MODIFY THE PARAMETER VALUES OR DYNAMICAL
 * EQUATIONS EDIT THE XML FILE (dynamics.xml).
 * 
 */
 
#ifndef DRIVENPENDULUM_INCLUDED_
#define DRIVENPENDULUM_INCLUDED_

#include "BaseModel.h"
#include "RungeKutta4.h"

#include "DrivenPendulumParameterDialog.h"

class DrivenPendulum : public DynamicalModel
{
  Scalar g;
  Scalar a;
  Scalar F;
  Scalar w;
public:
  DrivenPendulum(Scalar G, Scalar A, Scalar F, Scalar W)
     : g(G), a(A), F(F), w(W)
  { }

  virtual ~DrivenPendulum() { }

  virtual Vector exact(const Point& p) const
    {
      return Vector(p[2],w,-g*p[2] - a*sin(p[0]) + F*cos(p[1]));
    }

private:
  virtual void _setValue(const std::string& name, Scalar value)
    {
      if      (name == "g") g = value;
      else if (name == "a") a = value;
      else if (name == "F") F = value;
      else if (name == "w") w = value;
    }
};

class DrivenPendulumIntegrator : public Integrator
{
  DrivenPendulum* dynamics;
  RungeKutta4<DrivenPendulum>* integrator;
public:
  DrivenPendulumIntegrator()
    {
      dynamics = new DrivenPendulum(.3, 4.0, 4.0, .6);
      double stepSize = 0.01;
      integrator = new RungeKutta4<DrivenPendulum>(*dynamics, stepSize);
    }

  virtual ~DrivenPendulumIntegrator()
    {
      delete dynamics;
      delete integrator;
    }

  inline Vector step(const Point& p)
    {
      return integrator->step(p);
    }

  virtual unsigned int getModelVersion()
    {
      return dynamics->getModelVersion();
    }

  virtual CaveDialog* createParameterDialog(GLMotif::PopupMenu *parent)
    {
      return new DrivenPendulumParameterDialog(parent, dynamics);
    }

  virtual Vrui::Point center() const
    {
      return Vrui::Point(0.0, 0.0, 0.0);
    }
};

#endif

/*
 * DO NOT EDIT THIS FILE.
 *
 * THIS FILE HAS BEEN AUTOMATICALLY GENERATED.
 * ANY CHANGES MADE TO THE CODE WILL BE LOST.
 *
 * TO MODIFY THE PARAMETER VALUES OR DYNAMICAL
 * EQUATIONS EDIT THE XML FILE (dynamics.xml).
 * 
 */
 
#ifndef STVFLOW_INCLUDED_
#define STVFLOW_INCLUDED_

#include "BaseModel.h"
#include "RungeKutta4.h"

#include "STVFlowParameterDialog.h"

class STVFlow : public DynamicalModel
{
  Scalar alpha;
  Scalar beta;
public:
  STVFlow(Scalar Alpha, Scalar Beta)
     : alpha(Alpha), beta(Beta)
  { }

  virtual ~STVFlow() { }

  virtual Vector exact(const Point& p) const
    {
      return Vector(alpha*p[2] - 8.0*p[0]*p[1],11.0*p[0]*p[0] + 3.0*p[1]*p[1] + p[2]*p[2] + beta*p[0]*p[2] - 3.0,-alpha*p[0] + 2.0*p[1]*p[2] - beta*p[0]*p[1]);
    }

private:
  virtual void _setValue(const std::string& name, Scalar value)
    {
      if      (name == "alpha") alpha = value;
      else if (name == "beta") beta = value;
    }
};

class STVFlowIntegrator : public Integrator
{
  STVFlow* dynamics;
  RungeKutta4<STVFlow>* integrator;
public:
  STVFlowIntegrator()
    {
      dynamics = new STVFlow(0.5, 0.5);
      double stepSize = 0.01;
      integrator = new RungeKutta4<STVFlow>(*dynamics, stepSize);
    }

  virtual ~STVFlowIntegrator()
    {
      delete dynamics;
      delete integrator;
    }

  inline Vector step(const Point& p)
    {
      return integrator->step(p);
    }

  virtual unsigned int getModelVersion()
    {
      return dynamics->getModelVersion();
    }

  virtual CaveDialog* createParameterDialog(GLMotif::PopupMenu *parent)
    {
      return new STVFlowParameterDialog(parent, dynamics);
    }

  virtual Vrui::Point center() const
    {
      return Vrui::Point(0.0, 0.0, 0.0);
    }
};

#endif
